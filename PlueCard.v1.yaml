openapi: 3.0.0
info:
  title: PlueCard
  version: '1.0'
  description: Documentação da interface de integração dos servidores REST da aplicação PlueCard.
  contact:
    name: Leandro Ferreira
    url: 'https://github.com/leandroferreirra'
    email: leandro.daf4@gmail.com
servers:
  - url: 'https://api.pluecard.com'
    description: Desenvolvimento
paths:
  /account/create:
    post:
      summary: Criação de usuário
      operationId: post-account-create
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Cria um usuário.
      requestBody:
        content:
          application/json:
            schema:
              description: Schema do payload de integração.
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  description: Nome do usuário.
                email:
                  type: string
                  minLength: 1
                  description: Email do usuário.
                acceptTerms:
                  type: boolean
                  description: Validação dos termos de uso.
                password:
                  type: string
                  minLength: 1
                  description: Senha do usuário.
                password_confirmation:
                  type: string
                  minLength: 1
                  description: Confirmação da senha.
                newsletter:
                  type: boolean
                  description: Confirmação do usuário para receber notificações de atualização da aplicação.
                discountCoupons:
                  type: boolean
                  description: Confirmação do usuário para receber cupons de descontos.
              required:
                - name
                - email
                - acceptTerms
                - password
                - password_confirmation
                - newsletter
                - discountCoupons
            examples:
              Criação de usuário:
                value:
                  name: Leandro Ferreira
                  email: foo@gmail.com
                  acceptTerms: true
                  password: foo-bar-123456789
                  password_confirmation: foo-bar-123456789
                  newsletter: true
                  discountCoupons: true
        description: Criação de usuário
      security: []
      tags:
        - Conta de usuário
  /auth/login:
    post:
      summary: Autenticação de usuário
      operationId: post-auth-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Schema do response de autenticação.
                type: object
                properties:
                  data:
                    type: object
                    description: Nó principal do retorno da API.
                    required:
                      - accessToken
                      - tokenType
                      - expiresIn
                    properties:
                      accessToken:
                        type: string
                        minLength: 1
                        description: Token de acesso.
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3RcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNjExNTMzMTMxLCJleHAiOjE2MTE1MzY3MzEsIm5iZiI6MTYxMTUzMzEzMSwianRpIjoiVzNQQUhtdWl4MG9FeDhyYiIsInN1YiI6MjQsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.CvasSTZPqWRQr5cgm7jFiHho8RGnZIzQwJzAfjUql3A
                        readOnly: true
                      tokenType:
                        type: string
                        minLength: 1
                        description: Tipo do token.
                        example: bearer
                        readOnly: true
                      expiresIn:
                        type: string
                        example: '2021-01-28T15:06:41.534407Z'
                        description: Tempo de vida do token.
                        format: date-time
                        readOnly: true
                    readOnly: true
                required:
                  - data
              examples:
                Exemplo de retorno.:
                  value:
                    data:
                      accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3RcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNjExNTMzMTMxLCJleHAiOjE2MTE1MzY3MzEsIm5iZiI6MTYxMTUzMzEzMSwianRpIjoiVzNQQUhtdWl4MG9FeDhyYiIsInN1YiI6MjQsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.CvasSTZPqWRQr5cgm7jFiHho8RGnZIzQwJzAfjUql3A
                      tokenType: bearer
                      expiresIn: '2021-01-28T15:06:41.534407Z'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Autentica um usuário.
      requestBody:
        content:
          application/json:
            schema:
              description: Schema do payload de integração.
              type: object
              properties:
                password:
                  type: string
                  minLength: 12
                  description: Senha do usuário.
                email:
                  type: string
                  format: email
                  description: Email de autenticação do usuário.
              required:
                - password
                - email
            examples:
              Autenticação do usuário:
                value:
                  email: foo@gmail.com
                  password: foo-bar-123456789
        description: Autenticação de usuário.
      security: []
      tags:
        - Autenticação
      parameters: []
  /auth/refresh:
    post:
      summary: Atualização de token de autenticação
      operationId: post-auth-refresh
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Schema do response de atualização de autenticação.
                type: object
                properties:
                  data:
                    type: object
                    description: Nó principal do retorno da API.
                    required:
                      - accessToken
                      - tokenType
                      - expiresIn
                    properties:
                      accessToken:
                        type: string
                        minLength: 1
                        description: Token de acesso.
                        readOnly: true
                      tokenType:
                        type: string
                        minLength: 1
                        description: Tipo do token.
                        readOnly: true
                      expiresIn:
                        type: string
                        description: Tempo de vida do token.
                        example: '2021-01-28T15:08:02.486877Z'
                        format: date-time
                        readOnly: true
                    readOnly: true
                required:
                  - data
              examples:
                Exemplo de retorno.:
                  value:
                    data:
                      accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3RcL2F1dGhcL3JlZnJlc2giLCJpYXQiOjE2MTE1MzAzNTcsImV4cCI6MTYxMTUzMzk3MiwibmJmIjoxNjExNTMwMzcyLCJqdGkiOiJ4YVpmMndXTUNjc2FEeXJ2Iiwic3ViIjoyNCwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.8xQIZSqTmvCOidroICz9UdX7RmiG7k5TPHgkOu0Q6xg
                      tokenType: bearer
                      expiresIn: '2021-01-28T15:29:24.017877Z'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Esse endpoint gera um novo token de acesso sem a necessidade de informar o nome de usuário e senha.
      tags:
        - Autenticação
  /auth/logout:
    post:
      summary: Invalidar token de usuário
      operationId: post-auth-logout
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Faz o logout do usuário.
      tags:
        - Autenticação
  /account/confirmation:
    post:
      summary: Confirmação de (E-mail / Conta)
      operationId: post-account-confirmation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: object
                    required:
                      - accessToken
                      - tokenType
                      - expiresIn
                    description: Nó principal do retorno da API.
                    properties:
                      accessToken:
                        type: string
                        minLength: 1
                        description: Token de acesso.
                        readOnly: true
                      tokenType:
                        type: string
                        minLength: 1
                        description: Tipo do token.
                        readOnly: true
                      expiresIn:
                        type: string
                        minLength: 1
                        description: Tempo de vida do token.
                        format: date-time
                        readOnly: true
                required:
                  - data
              examples:
                Conta confirmada com sucesso.:
                  value:
                    data:
                      accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvYXBpLnBsdWVjYXJkLmNvbVwvYWNjb3VudFwvY29uZmlybWF0aW9uIiwiaWF0IjoxNjExODQzMTgxLCJleHAiOjE2MTE4NDY3ODEsIm5iZiI6MTYxMTg0MzE4MSwianRpIjoiOWM4d0hXclZocElRcmpmOCIsInN1YiI6MTAsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.sKtfzqIB8JKKAh47wmWYT3a4aqXAoRMI_cEklsh4DVI
                      tokenType: bearer
                      expiresIn: '2021-01-28T15:13:01.152812Z'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Esse endpoint faz a validação da conta do usuário utilizando a hash que foi notificada no email do mesmo.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                hash:
                  type: string
                  minLength: 1
                  description: Hash recebida no e-mail do usuário.
                  example: '5687618537'
                  writeOnly: true
              required:
                - hash
            examples:
              Exemplo De integração:
                value:
                  hash: '3502183397'
        description: Confirmação de email de usuário
      tags:
        - Conta de usuário
      security: []
  /account/confirmation/refresh:
    post:
      summary: Notificar token de confirmação de Email
      operationId: post-account-confirmation-refresh
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Esse endpoint renotifica o email do usuário com uma nova hash de confirmação de email.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                  format: email
                  description: E-mail do usuário.
              required:
                - email
            examples:
              Exemplo de solicitação de nova hash:
                value:
                  email: foo@gmail.com
        description: ''
      tags:
        - Conta de usuário
      security: []
  /account/password/reset:
    post:
      summary: Solicitar reset de senha
      operationId: post-account-password-reset
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Esse endpoint notifica o email do usuário com uma hash para a troca de senha.
      tags:
        - Conta de usuário
  /account/password:
    put:
      summary: Resetar senha do usuário
      operationId: put-account-password
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Esse endpoint troca a senha do usuário, é necessário ter uma hash válida.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                hash:
                  type: string
                  minLength: 1
                  description: Hash de troca de senha enviada no email do usuário.
                  writeOnly: true
                password:
                  type: string
                  minLength: 1
                  description: Nova senha.
                  writeOnly: true
                password_confirmation:
                  type: string
                  minLength: 1
                  description: Confirmação da senha.
                  writeOnly: true
              required:
                - hash
                - password
                - password_confirmation
            examples:
              Exemplo de payload para troca de senha.:
                value:
                  hash: '9918219100'
                  password: '123456789900'
                  password_confirmation: '123456789900'
      tags:
        - Conta de usuário
  /users:
    get:
      summary: Lista todos os usuários do sistema
      tags:
        - Usuário
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    description: Listagem de usuários.
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/MetaPaginate'
                required:
                  - data
                  - meta
              examples:
                Exemplo de retorno:
                  value:
                    data:
                      - id: 1
                        name: Leandro Ferreira
                        email: leandro.daf4@gmail.com
                        acceptTerms: true
                        newsletter: true
                        discountCoupons: true
                        confirmationEmail: true
                        created_at: '2021-01-28T17:20:40.000000Z'
                        updated_at: '2021-01-28T21:25:53.000000Z'
                    meta:
                      pagination:
                        total: 0
                        count: 1
                        per_page: 15
                        current_page: 1
                        total_pages: 1
                        links: {}
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-users
      description: Lista todos os usuários do sistema.
    put:
      summary: Atualiza o usuário autenticado
      operationId: put-users
      responses:
        '200':
          description: OK
      description: Atualização do usuário logado.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  description: Nome do usuário.
                newsletter:
                  type: boolean
                  description: Confirmação do usuário para receber notificações de atualização da aplicação.
                discountCoupons:
                  type: boolean
                  description: Confirmação do usuário para receber cupons de descontos.
              required:
                - name
                - newsletter
                - discountCoupons
            examples:
              Exemplo de atualização:
                value:
                  name: Leandro Ferreira
                  newsletter: true
                  discountCoupons: true
      tags:
        - Usuário
    delete:
      summary: Deleta o usuário autenticado
      operationId: delete-users
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Deletar completamente do sistema o usuário autenticado.
      tags:
        - Usuário
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Identificado do usuário
    get:
      summary: Retorna o contexto de um usuário especifico
      tags:
        - Usuário - Administração
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                required:
                  - data
              examples:
                Exemplo de retorno:
                  value:
                    data:
                      id: 1
                      name: Leandro Ferreira
                      email: leandro.daf4@gmail.com
                      acceptTerms: true
                      newsletter: true
                      discountCoupons: true
                      confirmationEmail: true
                      created_at: '2021-01-28T17:20:40.000000Z'
                      updated_at: '2021-01-28T21:25:53.000000Z'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-users-id
      description: Retorna o contexto de um usuário específico.
    put:
      summary: Atualização de um usuário específico
      operationId: put-users-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                    description: Nome do usuário.
                  newsletter:
                    type: boolean
                    description: Confirmação do usuário para receber notificações de atualização da aplicação.
                  discountCoupons:
                    type: boolean
                    description: Confirmação do usuário para receber cupons de descontos.
                required:
                  - name
                  - newsletter
                  - discountCoupons
              examples:
                Exemplo de atualização:
                  value:
                    name: Leandro Ferreira
                    newsletter: true
                    discountCoupons: true
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Atualiza um usuário específico.
      tags:
        - Usuário - Administração
    delete:
      summary: Deleta de um usuário específico
      operationId: delete-users-id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      tags:
        - Usuário - Administração
      description: Deletar completamente do sistema um usuário específico.
  /users/me:
    get:
      summary: Retorna o contexto do usuário logado
      tags:
        - Usuário - Administração
      operationId: get-users-me
      description: Retorna o contexto do usuário logado.
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
              examples:
                Exemplo de retorno:
                  value:
                    data:
                      id: 1
                      name: Leandro Ferreira
                      email: leandro.daf4@gmail.com
                      acceptTerms: true
                      newsletter: true
                      discountCoupons: true
                      confirmationEmail: true
                      created_at: '2021-01-28T17:20:40.000000Z'
                      updated_at: '2021-01-28T21:25:53.000000Z'
components:
  schemas:
    User:
      description: Modelo do usuário
      type: object
      x-examples:
        Exemplo de usuário:
          name: Leandro Ferreira
          email: leandro.daf4@gmail.com
          acceptTerms: true
          newsletter: true
          discountCoupons: true
          confirmationEmail: true
          created_at: '2021-01-28T17:20:40.000000Z'
          updated_at: '2021-01-28T21:25:53.000000Z'
      properties:
        name:
          type: string
          minLength: 1
          description: Nome do usuário.
        email:
          type: string
          minLength: 1
          description: Email do usuário.
        acceptTerms:
          type: boolean
          description: Validação dos termos de uso.
        newsletter:
          type: boolean
          description: Confirmação do usuário para receber notificações de atualização da aplicação.
        discountCoupons:
          type: boolean
          description: Confirmação do usuário para receber cupons de descontos.
        confirmationEmail:
          type: boolean
          description: Confirmação do email do usuário.
        created_at:
          type: string
          minLength: 1
          description: Data de criação.
        updated_at:
          type: string
          minLength: 1
          description: Data da última atualização.
        id:
          type: integer
          description: Identificador do usuário.
      title: User
    MetaPaginate:
      description: Metadados do modelo de paginação.
      type: object
      properties:
        pagination:
          type: object
          required:
            - total
            - count
            - per_page
            - current_page
            - total_pages
            - links
          properties:
            total:
              type: number
              description: Total de páginas para integração.
              deprecated: true
            count:
              type: number
              description: Quantidade de itens retornados.
            per_page:
              type: number
              description: Quantidade por página.
            current_page:
              type: number
              description: Página atual.
            total_pages:
              type: number
              description: Quantidade de páginas iteradas.
            links:
              type: object
              deprecated: true
              description: Link para a próxima iteração.
      required:
        - pagination
      title: Meta Paginate
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Autenticação
  - name: Conta de usuário
  - name: Usuário - Administração
  - name: Usuário
security:
  - bearerAuth: []
